C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/06/2023 18:16:40 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\fajka\S
                    -implicityStudio\v5_workspace\SPI proba\src\InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFU
                    -ZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\fajka\SimplicityStudio\v5_workspac
                    -e\SPI proba\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared/si8051Base;C:/SiliconLabs/S
                    -implicityStudio/v5/developer/sdks/8051/v4.2.5//Device/EFM8SB2/inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGEL
                    -ENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8SB2_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        // Save the SFRPAGE
  27   1        uint8_t SFRPAGE_save = SFRPAGE;
  28   1        PCA_0_enter_DefaultMode_from_RESET ();
  29   1        PORTS_0_enter_DefaultMode_from_RESET ();
  30   1        PORTS_1_enter_DefaultMode_from_RESET ();
  31   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  32   1        HFOSC_0_enter_DefaultMode_from_RESET ();
  33   1        CLOCK_0_enter_DefaultMode_from_RESET ();
  34   1        SPI_1_enter_DefaultMode_from_RESET ();
  35   1        // Restore the SFRPAGE
  36   1        SFRPAGE = SFRPAGE_save;
  37   1        // [Config Calls]$
  38   1      
  39   1      }
  40          
  41          extern void
  42          PCA_0_enter_DefaultMode_from_RESET (void)
  43          {
  44   1        // $[PCA0MD - PCA Mode]
  45   1        /***********************************************************************
  46   1         - Disable Watchdog Timer
  47   1         - System clock divided by 12
  48   1         - PCA continues to function normally while the system controller is in
  49   1         Idle Mode
  50   1         - Disable the CF interrupt
  51   1         - Disable Watchdog Timer
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/06/2023 18:16:40 PAGE 2   

  52   1         - Watchdog Timer Enable unlocked
  53   1         ***********************************************************************/
  54   1        SFRPAGE = 0x00;
  55   1        PCA0MD &= ~PCA0MD_WDTE__BMASK;
  56   1        PCA0MD = PCA0MD_CPS__SYSCLK_DIV_12 | PCA0MD_CIDL__NORMAL
  57   1            | PCA0MD_ECF__OVF_INT_DISABLED | PCA0MD_WDTE__DISABLED
  58   1            | PCA0MD_WDLCK__UNLOCKED;
  59   1        // [PCA0MD - PCA Mode]$
  60   1      
  61   1        // $[PCA0H - PCA Counter/Timer High Byte]
  62   1        // [PCA0H - PCA Counter/Timer High Byte]$
  63   1      
  64   1        // $[PCA0L - PCA Counter/Timer Low Byte]
  65   1        // [PCA0L - PCA Counter/Timer Low Byte]$
  66   1      
  67   1        // $[PCA0PWM - PCA PWM Configuration]
  68   1        // [PCA0PWM - PCA PWM Configuration]$
  69   1      
  70   1        // $[PCA0CN0 - PCA Control 0]
  71   1        // [PCA0CN0 - PCA Control 0]$
  72   1      
  73   1      }
  74          
  75          extern void
  76          PORTS_0_enter_DefaultMode_from_RESET (void)
  77          {
  78   1        // $[P0 - Port 0 Pin Latch]
  79   1        // [P0 - Port 0 Pin Latch]$
  80   1      
  81   1        // $[P0MDOUT - Port 0 Output Mode]
  82   1        /***********************************************************************
  83   1         - P0.0 output is push-pull
  84   1         - P0.1 output is open-drain
  85   1         - P0.2 output is push-pull
  86   1         - P0.3 output is open-drain
  87   1         - P0.4 output is open-drain
  88   1         - P0.5 output is open-drain
  89   1         - P0.6 output is open-drain
  90   1         - P0.7 output is open-drain
  91   1         ***********************************************************************/
  92   1        P0MDOUT = P0MDOUT_B0__PUSH_PULL | P0MDOUT_B1__OPEN_DRAIN
  93   1            | P0MDOUT_B2__PUSH_PULL | P0MDOUT_B3__OPEN_DRAIN | P0MDOUT_B4__OPEN_DRAIN
  94   1            | P0MDOUT_B5__OPEN_DRAIN | P0MDOUT_B6__OPEN_DRAIN
  95   1            | P0MDOUT_B7__OPEN_DRAIN;
  96   1        // [P0MDOUT - Port 0 Output Mode]$
  97   1      
  98   1        // $[P0MDIN - Port 0 Input Mode]
  99   1        // [P0MDIN - Port 0 Input Mode]$
 100   1      
 101   1        // $[P0SKIP - Port 0 Skip]
 102   1        // [P0SKIP - Port 0 Skip]$
 103   1      
 104   1        // $[P0MASK - Port 0 Mask]
 105   1        // [P0MASK - Port 0 Mask]$
 106   1      
 107   1        // $[P0MAT - Port 0 Match]
 108   1        // [P0MAT - Port 0 Match]$
 109   1      
 110   1        // $[P0DRV - Port 0 Drive Strength]
 111   1        // [P0DRV - Port 0 Drive Strength]$
 112   1      
 113   1      }
 114          
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/06/2023 18:16:40 PAGE 3   

 115          extern void
 116          PORTS_1_enter_DefaultMode_from_RESET (void)
 117          {
 118   1        // $[P1 - Port 1 Pin Latch]
 119   1        // [P1 - Port 1 Pin Latch]$
 120   1      
 121   1        // $[P1MDOUT - Port 1 Output Mode]
 122   1        /***********************************************************************
 123   1         - P1.0 output is push-pull
 124   1         - P1.1 output is open-drain
 125   1         - P1.2 output is push-pull
 126   1         - P1.3 output is push-pull
 127   1         - P1.4 output is open-drain
 128   1         - P1.5 output is open-drain
 129   1         - P1.6 output is open-drain
 130   1         - P1.7 output is open-drain
 131   1         ***********************************************************************/
 132   1        P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__OPEN_DRAIN
 133   1            | P1MDOUT_B2__PUSH_PULL | P1MDOUT_B3__PUSH_PULL | P1MDOUT_B4__OPEN_DRAIN
 134   1            | P1MDOUT_B5__OPEN_DRAIN | P1MDOUT_B6__OPEN_DRAIN
 135   1            | P1MDOUT_B7__OPEN_DRAIN;
 136   1        // [P1MDOUT - Port 1 Output Mode]$
 137   1      
 138   1        // $[P1MDIN - Port 1 Input Mode]
 139   1        // [P1MDIN - Port 1 Input Mode]$
 140   1      
 141   1        // $[P1SKIP - Port 1 Skip]
 142   1        // [P1SKIP - Port 1 Skip]$
 143   1      
 144   1        // $[P1MASK - Port 1 Mask]
 145   1        // [P1MASK - Port 1 Mask]$
 146   1      
 147   1        // $[P1MAT - Port 1 Match]
 148   1        // [P1MAT - Port 1 Match]$
 149   1      
 150   1        // $[P1DRV - Port 1 Drive Strength]
 151   1        // [P1DRV - Port 1 Drive Strength]$
 152   1      
 153   1      }
 154          
 155          extern void
 156          PBCFG_0_enter_DefaultMode_from_RESET (void)
 157          {
 158   1        // $[XBR2 - Port I/O Crossbar 2]
 159   1        /***********************************************************************
 160   1         - Weak Pullups enabled 
 161   1         - Crossbar enabled
 162   1         ***********************************************************************/
 163   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED;
 164   1        // [XBR2 - Port I/O Crossbar 2]$
 165   1      
 166   1        // $[XBR0 - Port I/O Crossbar 0]
 167   1        /***********************************************************************
 168   1         - UART I/O unavailable at Port pin
 169   1         - SPI I/O unavailable at Port pins
 170   1         - SMBus 0 I/O unavailable at Port pins
 171   1         - CP0 unavailable at Port pin
 172   1         - Asynchronous CP0 unavailable at Port pin
 173   1         - CP1 unavailable at Port pin
 174   1         - Asynchronous CP1 unavailable at Port pin
 175   1         - SYSCLK output routed to Port pin
 176   1         ***********************************************************************/
 177   1        XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__DISABLED
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/06/2023 18:16:40 PAGE 4   

 178   1            | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 179   1            | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__ENABLED;
 180   1        // [XBR0 - Port I/O Crossbar 0]$
 181   1      
 182   1        // $[XBR1 - Port I/O Crossbar 1]
 183   1        /***********************************************************************
 184   1         - SPI1 I/O routed to Port pins
 185   1         - All PCA I/O unavailable at Port pins
 186   1         - ECI unavailable at Port pin
 187   1         - T0 unavailable at Port pin
 188   1         - T1 unavailable at Port pin
 189   1         ***********************************************************************/
 190   1        XBR1 = XBR1_SPI1E__ENABLED | XBR1_PCA0ME__DISABLED | XBR1_ECIE__DISABLED
 191   1            | XBR1_T0E__DISABLED | XBR1_T1E__DISABLED;
 192   1        // [XBR1 - Port I/O Crossbar 1]$
 193   1      
 194   1      }
 195          
 196          extern void
 197          HFOSC_0_enter_DefaultMode_from_RESET (void)
 198          {
 199   1        // $[HFO#CAL - High Frequency Oscillator Calibration]
 200   1        // [HFO#CAL - High Frequency Oscillator Calibration]$
 201   1      
 202   1        // $[HFO#CN - High Frequency Oscillator Control]
 203   1        /***********************************************************************
 204   1         - High Frequency Oscillator enabled
 205   1         ***********************************************************************/
 206   1        HFO0CN |= HFO0CN_IOSCEN__ENABLED;
 207   1        // [HFO#CN - High Frequency Oscillator Control]$
 208   1      
 209   1        // $[Oscillator Ready]
 210   1        while ((HFO0CN & HFO0CN_IFRDY__BMASK) == HFO0CN_IFRDY__NOT_SET)
 211   1          ;
 212   1        // [Oscillator Ready]$
 213   1      
 214   1      }
 215          
 216          extern void
 217          CLOCK_0_enter_DefaultMode_from_RESET (void)
 218          {
 219   1        // $[CLKSEL - Clock Select]
 220   1        /***********************************************************************
 221   1         - SYSCLK is equal to selected clock source divided by 8
 222   1         - Clock derived from the internal precision High-Frequency Oscillator
 223   1         ***********************************************************************/
 224   1        CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_8 | CLKSEL_CLKSL__HFOSC;
 225   1        // Wait for the clock to be ready
 226   1        while ((CLKSEL & CLKSEL_CLKRDY__BMASK) != CLKSEL_CLKRDY__SET)
 227   1          ;
 228   1        // [CLKSEL - Clock Select]$
 229   1      
 230   1      }
 231          
 232          extern void
 233          SPI_1_enter_DefaultMode_from_RESET (void)
 234          {
 235   1        // $[SPI1CKR - SPI1 Clock Rate]
 236   1        // [SPI1CKR - SPI1 Clock Rate]$
 237   1      
 238   1        // $[SPI1CFG - SPI1 Configuration]
 239   1        /***********************************************************************
 240   1         - Enable master mode. Operate as a master
C51 COMPILER V9.60.0.0   INITDEVICE                                                        06/06/2023 18:16:40 PAGE 5   

 241   1         ***********************************************************************/
 242   1        SPI1CFG |= SPI1CFG_MSTEN__MASTER_ENABLED;
 243   1        // [SPI1CFG - SPI1 Configuration]$
 244   1      
 245   1        // $[SPI1CN0 - SPI1 Control]
 246   1        /***********************************************************************
 247   1         - Enable the SPI module
 248   1         - 4-Wire Single-Master Mode. NSS is an output and logic low
 249   1         ***********************************************************************/
 250   1        SPI1CN0 &= ~SPI1CN0_NSSMD__FMASK;
 251   1        SPI1CN0 |= SPI1CN0_SPIEN__ENABLED | SPI1CN0_NSSMD__4_WIRE_MASTER_NSS_LOW;
 252   1        // [SPI1CN0 - SPI1 Control]$
 253   1      
 254   1      }
 255          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     87    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
