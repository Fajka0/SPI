C51 COMPILER V9.60.0.0   SPI_PROBA_MAIN                                                    06/06/2023 18:37:58 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SPI_PROBA_MAIN
OBJECT MODULE PLACED IN .\src\SPI proba_main.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\Users\fajka\S
                    -implicityStudio\v5_workspace\SPI proba\src\SPI proba_main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLO
                    -ATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\fajka\SimplicityStudio\v5_work
                    -space\SPI proba\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/shared/si8051Base;C:/SiliconLa
                    -bs/SimplicityStudio/v5/developer/sdks/8051/v4.2.5//Device/EFM8SB2/inc) PRINT(.\src\SPI proba_main.lst) COND PAGEWIDTH(12
                    -0) PAGELENGTH(65) OBJECT(.\src\SPI proba_main.OBJ)

line level    source

   1          //=========================================================
   2          // src/SPI proba_main.c: generated by Hardware Configurator
   3          //
   4          // This file will be updated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          //-----------------------------------------------------------------------------
  10          // Includes
  11          //-----------------------------------------------------------------------------
  12          #include <SI_EFM8SB2_Register_Enums.h>                  // SFR declarations
  13          #include "InitDevice.h"
  14          // $[Generated Includes]
  15          // [Generated Includes]$
  16          
  17          //-----------------------------------------------------------------------------
  18          // SiLabs_Startup() Routine
  19          // ----------------------------------------------------------------------------
  20          // This function is called immediately after reset, before the initialization
  21          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  22          // useful place to disable the watchdog timer, which is enable by default
  23          // and may trigger before main() in some instances.
  24          //-----------------------------------------------------------------------------
  25          void SiLabs_Startup (void)
  26          {
  27   1        // $[SiLabs Startup]
  28   1        // [SiLabs Startup]$
  29   1      }
  30          
  31          
  32          #define LIS3DH_REG_CTRL_REG1 0x20
  33          #define LIS3DH_RW_BIT_WRITE 0x00
  34          #define LIS3DH_REG_CTRL_REG1    0x20
  35          #define LIS3DH_REG_CTRL_REG4    0x23
  36          #define LIS3DH_REG_CTRL_REG5    0x24
  37          #define LIS3DH_REG_CTRL_REG3    0x22
  38          #define LIS3DH_REG_INT1_CFG     0x30
  39          #define LIS3DH_REG_INT1_THS     0x32
  40          #define LIS3DH_REG_INT1_DURATION 0x33
  41          #define LIS3DH_REG_STATUS_REG 0x27
  42          #define LIS3DH_RW_BIT_READ 0x80
  43          #define LIS3DH_RW_BIT_WRITE 0x00
  44          
  45          #define LIS3DH_REG_OUT_X_H 0x29
  46          #define LIS3DH_REG_OUT_Y_H 0x2B
  47          #define LIS3DH_REG_OUT_Z_H 0x2D
  48          #define LIS3DH_REG_OUT_X_L 0x28
  49          #define LIS3DH_REG_OUT_Y_L 0x2A
  50          #define LIS3DH_REG_OUT_Z_L 0x2C
  51          
C51 COMPILER V9.60.0.0   SPI_PROBA_MAIN                                                    06/06/2023 18:37:58 PAGE 2   

  52          #define NSS P1_B3
  53          
  54          // SPI port inicializ√°l√°sa
  55          void SPI_Init()
  56          {
  57   1          SPI0CFG = 0x40;     // Master √ºzemm√≥d, SPI0CLK/4
  58   1          SPI0CN0 = 0x01;     // SPI port enged√©lyez√©se
  59   1          P0MDOUT |= 0x13;    // P0.0, P0.1 √©s P0.3 kimenetek SPI sz√°m√°ra
  60   1      }
  61          
  62          // SPI adat k√ºld√©se
  63          uint8_t SPI_Write(uint8_t adat)
  64          {
  65   1          NSS= 0;
  66   1          SPI0DAT = adat;                   // Adat be√°ll√≠t√°sa az adatregiszterbe
  67   1          while(!(SPI0CN0 & 0x80));         // V√°rakoz√°s, am√≠g az SPIF bit be√°ll
  68   1          SPI0CN0 &= ~0x80;                 // SPIF bit null√°z√°sa
  69   1          NSS=1;
  70   1          return SPI0DAT;                   // V√°lasz beolvas√°sa az adatregiszterb≈ël
  71   1      }
  72          // LIS3DH inicializ√°l√°sa
  73          void LIS3DH_Init()
  74          {
  75   1          // CTRL_REG1 be√°ll√≠t√°sa
  76   1          SPI_Write(LIS3DH_REG_CTRL_REG1 | LIS3DH_RW_BIT_WRITE);  // Register c√≠m k√ºld√©se
  77   1          SPI_Write(0x47);                                        // CTRL_REG1 be√°ll√≠t√°sa: 100 Hz mintav√©tel
             -, norm√°l √ºzemm√≥d, X, Y √©s Z tengely enged√©lyez√©se
  78   1      
  79   1          // CTRL_REG4 be√°ll√≠t√°sa
  80   1          SPI_Write(LIS3DH_REG_CTRL_REG4 | LIS3DH_RW_BIT_WRITE);  // Register c√≠m k√ºld√©se
  81   1          SPI_Write(0x08);                                        // CTRL_REG4 be√°ll√≠t√°sa: ¬±2g √©rz√©kenys√©
             -g
  82   1      
  83   1          // CTRL_REG5 be√°ll√≠t√°sa
  84   1          SPI_Write(LIS3DH_REG_CTRL_REG5 | LIS3DH_RW_BIT_WRITE);  // Register c√≠m k√ºld√©se
  85   1          SPI_Write(0x10);  // CTRL_REG5 be√°ll√≠t√°sa: FIFO letilt√°sa, nincs be√©p√≠tett h≈ëm√©rs√©klet-szenzo
             -r
  86   1      
  87   1          // CTRL_REG3 be√°ll√≠t√°sa
  88   1          SPI_Write(LIS3DH_REG_CTRL_REG3 | LIS3DH_RW_BIT_WRITE);  // Register c√≠m k√ºld√©se
  89   1          SPI_Write(0x00);                                        // CTRL_REG3 be√°ll√≠t√°sa: nincs be√©p√≠tett 
             -FIFO
  90   1      
  91   1          // INT1_CFG be√°ll√≠t√°sa
  92   1          SPI_Write(LIS3DH_REG_INT1_CFG | LIS3DH_RW_BIT_WRITE);   // Register c√≠m k√ºld√©se
  93   1          SPI_Write(0x00);                                        // INT1_CFG be√°ll√≠t√°sa: interrupt letilt√°s
             -a
  94   1      
  95   1          // INT1_THS be√°ll√≠t√°sa
  96   1          SPI_Write(LIS3DH_REG_INT1_THS | LIS3DH_RW_BIT_WRITE);   // Register c√≠m k√ºld√©se
  97   1          SPI_Write(0x00);                                        // INT1_THS be√°ll√≠t√°sa: interrupt k√ºsz√∂b√
             -©rt√©ke 0g
  98   1      
  99   1          // INT1_DURATION be√°ll√≠t√°sa
 100   1          SPI_Write(LIS3DH_REG_INT1_DURATION | LIS3DH_RW_BIT_WRITE); // Register c√≠m k√ºld√©se
 101   1          SPI_Write(0x00);                                          // INT1_DURATION be√°ll√≠t√°sa: interrupt id
             -≈ëkorl√°t letiltva
 102   1      }
 103          
 104          
 105          //-----------------------------------------------------------------------------
 106          // main() Routine
 107          // ----------------------------------------------------------------------------
C51 COMPILER V9.60.0.0   SPI_PROBA_MAIN                                                    06/06/2023 18:37:58 PAGE 3   

 108          int main (void)
 109          {
 110   1        // Call hardware initialization routine
 111   1        enter_DefaultMode_from_RESET();
 112   1        
 113   1        SPI_Init();
 114   1      
 115   1           // LIS3DH inicializ√°l√°sa
 116   1           LIS3DH_Init();
 117   1      
 118   1           // F≈ëciklus
 119   1           while(1)
 120   1           {
 121   2               int16_t x = 0;
 122   2               int8_t x_sift =0;
 123   2               int16_t y = 0;
 124   2               int16_t z = 0;
 125   2               // Adatok beolvas√°sa
 126   2               uint8_t status = SPI_Write(LIS3DH_REG_STATUS_REG | LIS3DH_RW_BIT_READ);  // STATUS_REG beolvas√°s
             -a
 127   2               if((status & 0x08) == 0x08)  // Ha az adatok frissek
 128   2               {
 129   3                   x_sift =SPI_Write(LIS3DH_REG_OUT_X_H | LIS3DH_RW_BIT_READ) << 8;
 130   3                   x = (SPI_Write(LIS3DH_REG_OUT_X_H | LIS3DH_RW_BIT_READ) << 8) | SPI_Write(LIS3DH_REG_OUT_X_L 
             -| LIS3DH_RW_BIT_READ);  // X tengely beolvas√°sa
 131   3                   y = (SPI_Write(LIS3DH_REG_OUT_Y_H | LIS3DH_RW_BIT_READ) << 8) | SPI_Write(LIS3DH_REG_OUT_Y_L 
             -| LIS3DH_RW_BIT_READ);  // Y tengely beolvas√°sa
 132   3                   z = (SPI_Write(LIS3DH_REG_OUT_Z_H | LIS3DH_RW_BIT_READ) << 8) | SPI_Write(LIS3DH_REG_OUT_Z_L 
             -| LIS3DH_RW_BIT_READ);  // Z tengely beolvas√°sa
 133   3      
 134   3      
 135   3               }
 136   2           }
 137   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    193    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
